//gcc -o gene_haplo generation_haplo.c -lm
//TODO
/*
+#Ajouter une étoile après chaque génotype lors de la génération
+#Associer chaque haplotype à une fréquence.
+#Boucler pour que se soit fait pour plusieurs génotypes.
+#Ajouter un test pour l'ouverture des fichiers.
+*/
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <math.h>
#define taille_max 20
#define TAILLEGENOTYPE 20


//Définition des structures

    typedef struct TypeGenotypeExplique TypeGenotypeExplique;
    typedef struct TypeHaplotype TypeHaplotype;

    struct TypeGenotypeExplique{
    char nom[TAILLEGENOTYPE+1];
    int num;
    TypeGenotypeExplique* suivant;
    TypeHaplotype* haplotypeComplementaire;
    };


	struct TypeHaplotype{
	TypeHaplotype* suivant;
	char nom[TAILLEGENOTYPE+1];
	int num;
	TypeGenotypeExplique* tete;
	int nombreGenotypes;
	};

	typedef struct ListeHaplotype{
		int nombreHaplotypes;
		TypeHaplotype* tete;
	}ListeHaplotype;

	typedef struct TypePaireHaplotypes TypePaireHaplotypes;
	typedef struct TypeGenotype TypeGenotype;

	struct TypePaireHaplotypes{
	    char brin1[TAILLEGENOTYPE+1];
	    char brin2[TAILLEGENOTYPE+1];
	    TypePaireHaplotypes* suivant;
	    int num;
	};

	struct TypeGenotype{
        int num;
        TypeGenotype* suivant;
        TypePaireHaplotypes* tete;
        char nom[TAILLEGENOTYPE+1];
        int nombrePairesHaplotypes;
	};

	typedef struct ListeGenotype{
        TypeGenotype* tete;
        int nombre;
    }ListeGenotype;

// Définition des structures fin


//Signatures des fonctions
TypeHaplotype* nouvelHaplotype(char* haplotype);
void afficheHaplotype(TypeHaplotype* haplotype);
ListeHaplotype nouvelleListeH();
ListeHaplotype ajoutHaplotype(ListeHaplotype liste, char* haplotype);
//Signature des fonctions FIN

int main(){

//Test Antoine
char haplotypeChaineDeCaracteres[TAILLEGENOTYPE+1];
//Fin Test

int i,Nbre_Haplo,x,j,k;
int Cptr2=0;
int compteur2;
int taille_geno=0;
char c[2];
char str[20];
FILE* FichierGenotypes = NULL;
FichierGenotypes=fopen("geno.txt", "r+");
FILE* FichierHaplotypes = NULL;
FichierHaplotypes=fopen("haplo_possibles.txt", "w+");
ListeHaplotype ListeHaplotypes;

//Initialisation de la liste
ListeHaplotypes=nouvelleListeH();
//Pas pertinent de faire un fonction ?

while(fgets(str,taille_max,FichierGenotypes)!=NULL){

Cptr2=0;
i=6;
do{
	i++;
	if(str[i]=='2'){Cptr2++;}
}while (str[i] != '*');
taille_geno=i-7;

Nbre_Haplo = pow(2,Cptr2);//calcul du nombre d'haplotypes
//Affichage des caractéristiques :
printf("Nombre de 2 : %d\n",Cptr2);
printf("Nombre d'haplotypes possibles : %d\n", Nbre_Haplo);
printf("Taille du genotype : %d\n",taille_geno);



int pos=0;//curseur pour se déplacer dans haplo.txt
int Matrice_haplo[Nbre_Haplo][taille_geno];
//Generation de tous les Haplotypes possibles dans la matrice, génération sous forme de plaindrome : le premier haplotype est en paire avec le dernier etc...
compteur2=0;
for (i=7;i<(7+taille_geno);i++){
//	fseek(FichierGenotypes, i, SEEK_SET);
	x=str[i];
	if(x=='0'){ //Si le genotype a un 0 à la position x
		for (j=0;j<Nbre_Haplo;j++){ //Tous les haplotypes ont un 0 à cette position
			Matrice_haplo[j][pos]='0';
		}
	}
	else if(x=='1'){ //Même mécanisme si x = 1
		for (j=0;j<Nbre_Haplo;j++){
			Matrice_haplo[j][pos]='1';
		}
	}
	else{ //Si le caractère est ambigue : 2
		compteur2++; //C'est le n.ième 2 rencontré par la fonction
		int positionement=0; //Pour se déplacer dans la matrice
		for(j=0;j<pow(2,compteur2-1);j++){ //Ecriture des haplotypes ambigues en fonction du nombre de 2 déjà rencontrés. Ecriture en palindrome.
			for(k=0;k<Nbre_Haplo/(pow(2,compteur2));k++){
				//ecrire 1
				Matrice_haplo[k+positionement][pos]='1';
			}
			for(k=Nbre_Haplo/(pow(2,compteur2));k<2*(Nbre_Haplo/(pow(2,compteur2)));k++){
				//ecrire 0
				Matrice_haplo[k+positionement][pos]='0';
			}
		positionement+=2*Nbre_Haplo/(pow(2,compteur2));
		}
	}
	pos++;
}
//

//Affichage des haplotypes possibles :
printf("haplotypes possibles :\n");
for(i=0;i<Nbre_Haplo;i++){
	strcpy(haplotypeChaineDeCaracteres, "\0");
	for(j=0;j<taille_geno;j++){
		printf("%c",c[0]=Matrice_haplo[i][j]); //Affichage de chaque valeur de la matrice
        strcat(haplotypeChaineDeCaracteres, c); //Intégration du caractère à la chaine
	}printf("\n");
    ListeHaplotypes=ajoutHaplotype(ListeHaplotypes, haplotypeChaineDeCaracteres);
}

for(i=0;i<Nbre_Haplo;i++){ //Chaque valeur est lue dans la matrice et écrite dans un fichier.
	for(j=0;j<taille_geno;j++){
		fputc(Matrice_haplo[i][j],FichierHaplotypes);
	}fputc('\n',FichierHaplotypes);
}

}//fin du premier while
afficheHaplotype(ListeHaplotypes.tete);
//Affichage de la liste

//Fermeture des fichiers avant la fin du script.
fclose(FichierGenotypes);
fclose(FichierHaplotypes);
return 0;
} //Fin du main

ListeHaplotype nouvelleListeH(){
    struct ListeHaplotype liste;
    liste.tete=NULL;
    liste.nombreHaplotypes=0;
    return liste;
}

//Ajotue un haplotype dans la liste
ListeHaplotype ajoutHaplotype(ListeHaplotype liste, char* haplotype){
    TypeHaplotype* nouveauH = malloc(sizeof(TypeHaplotype));
    strcpy(nouveauH->nom, haplotype);
    nouveauH->nombreGenotypes=0;
    nouveauH->tete=NULL;
    if (liste.tete==NULL){//ajout dans une liste vide
        nouveauH->num=1;
        nouveauH->suivant=NULL;
        liste.tete=nouveauH;
        }
    else{//ajout en tete dans une liste non vide
        nouveauH->suivant=liste.tete;
        liste.tete=nouveauH;
        nouveauH->num=nouveauH->suivant->num+1;
    }
    return liste;
}


void afficheHaplotype(TypeHaplotype* haplotype){
    if (haplotype!=NULL){
        afficheHaplotype(haplotype->suivant);
        printf("Haplotype n°%d\n", haplotype->num);
        printf("%s\n\n", haplotype->nom);
    }
}
